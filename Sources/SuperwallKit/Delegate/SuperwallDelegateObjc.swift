//
//  File.swift
//  
//
//  Created by Jake Mor on 10/5/21.
//

import Foundation

/// Objective-C-only delegate protocol that handles Superwall lifecycle events.
///
/// The delegate methods receive callbacks from the SDK in response to certain events that happen on the paywall.
///
/// You set this directly using ``Superwall/objcDelegate``.
///
/// To learn how to conform to the delegate in your app and best practices, see
/// [our docs](https://docs.superwall.com/docs/3rd-party-analytics).
@objc(SWKSuperwallDelegate)
public protocol SuperwallDelegateObjc: AnyObject {
  /// Called when the user taps a button on your paywall that has a `data-pw-custom` tag attached.
  ///
  /// To learn more about using this function, see [Custom Paywall Actions](https://docs.superwall.com/docs/custom-paywall-events).
  /// To learn about the types of tags that can be attached to elements on your paywall, see
  /// [Data Tags](https://docs.superwall.com/docs/data-tags).
  ///
  ///  - Parameter name: The value of the `data-pw-custom` tag in your HTML element that the user selected.
  @MainActor
  @objc optional func handleCustomPaywallAction(withName name: String)

  /// Called right before the paywall is dismissed.
  @MainActor
  @objc optional func willDismissPaywall(withInfo paywallInfo: PaywallInfo)

  /// Called right before the paywall is presented.
  @MainActor
  @objc optional func willPresentPaywall(withInfo paywallInfo: PaywallInfo)

  /// Called right after the paywall is dismissed.
  @MainActor
  @objc optional func didDismissPaywall(withInfo paywallInfo: PaywallInfo)

  /// Called right after the paywall is presented.
  @MainActor
  @objc optional func didPresentPaywall(withInfo paywallInfo: PaywallInfo)

  /// Called when the user opens a URL by selecting an element on your paywall that has a `data-pw-open-url` tag.
  ///
  /// - Parameter url: The URL to open
  @MainActor
  @objc optional func paywallWillOpenURL(url: URL)

  /// Called when the user taps a deep link in your paywall.
  ///
  /// - Parameter url: The deep link URL to open
  @MainActor
  @objc optional func paywallWillOpenDeepLink(url: URL)

  /// Called whenever an internal placement is tracked.
  ///
  /// Use this method when you want to track internal placements in your own analytics.
  ///
  /// You can switch over `info.placement` for a list of possible cases. See
  /// [Superwall Placements](https://docs.superwall.com/docs/tracking-analytics) for more info.
  ///
  /// - Parameter placementInfo: A ``SuperwallPlacementInfo`` object containing a `placement` and a `params` parameter.
  @MainActor
  @available(*, deprecated, renamed: "handleSuperwallEvent(withInfo:)")
  @objc optional func handleSuperwallPlacement(withInfo placementInfo: SuperwallPlacementInfo)

  /// Called whenever an internal event is tracked.
  ///
  /// Use this method when you want to track internal events in your own analytics.
  ///
  /// You can switch over `info.event` for a list of possible cases. See
  /// [Superwall Placements](https://docs.superwall.com/docs/tracking-analytics) for more info.
  ///
  /// - Parameter eventInfo: A ``SuperwallEventInfo`` object containing an `event` and a `params` parameter.
  @MainActor
  @objc optional func handleSuperwallEvent(withInfo eventInfo: SuperwallEventInfo)

  /// Called when the ``Superwall/subscriptionStatusObjc`` changes.
  ///
  /// You can use this function to update the state of your application.
  ///
  /// - Parameters:
  ///   - oldValue: The old value of the subscriptionStatus ``Superwall/subscriptionStatusObjc``.
  ///   - newValue: The new value of the subscriptionStatus ``Superwall/subscriptionStatusObjc``.
  @MainActor
  @objc optional func subscriptionStatusDidChange(
    from oldValue: SubscriptionStatusObjc,
    to newValue: SubscriptionStatusObjc
  )

  /// Receive all the log messages generated by the SDK.
  ///
  /// - Parameters:
  ///   - level: Specifies the detail of the logs returned from the SDK to the console.
  ///   Can be either `DEBUG`, `INFO`, `WARN`, or `ERROR`, as defined by ``LogLevel``.
  ///   - scope: The possible scope of logs to print to the console, as defined by ``LogScope``.
  ///   - message: The message associated with the log.
  ///   - info: A dictionary of information associated with the log.
  ///   - error: The error associated with the log.
  @MainActor
  @objc optional func handleLog(
    level: String,
    scope: String,
    message: String?,
    info: [String: Any]?,
    error: Swift.Error?
  )

  /// Called before the redemption of a code from a web paywall.
  @MainActor
  @objc optional func willRedeemLink()

  /// A code was redeemed from a web paywall.
  ///
  /// - Parameter result: A ``RedemptionResult`` enum containing information about
  /// the redeemed the code.
  @MainActor
  @objc optional func didRedeemLink(result: RedemptionResultObjc)
}
